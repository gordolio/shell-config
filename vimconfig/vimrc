syntax on
filetype plugin indent on

" Convert tabs to spaces
set expandtab
" tabs are worth 3 spaces
set shiftwidth=2
set tabstop=2
set softtabstop=2

" automatically indent
" in code blocks
set smartindent

highlight WhiteOnRed ctermfg=white ctermbg=red

highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" Change the bad chars to use unicode chars
exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
set list


set backspace=2
set nocompatible
set ruler
set showmode

" make semicolon also work as colon for commands
nnoremap ; :



" TODO 2021-01-05 find out what this viminfo does
"set viminfo='10,\"100,:20,%,n~/.viminfo

"hilight searches in LightBlue
set hlsearch
hi Search guibg=LightBlue

" This rewires n and N to do the highlighing...
nnoremap <silent> n   n:call HLNext(0.4)<cr>
nnoremap <silent> N   N:call HLNext(0.4)<cr>

" remap semicolon

nnoremap ; :



" 2021-01-05 Disabling this section - I don't know what it does
" au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
" au BufNewFile,BufRead *.txtmt setf mathdoc

au BufRead /private/var/folders/*/sql* set ft=mysql

" nerdtree commands
function OpenMe()
  NERDTree
  wincmd l
endfunction
function CloseMe()
  call system('echo -e -n "\033]50;StealFocus\007">/dev/tty')
  q
endfunction


"set rtp+=/usr/local/lib/python2.7/site-packages/Powerline-beta-py2.7.egg/powerline/bindings/vim


" 2021-01-05 - I don't work with spin files anymore
" au BufRead,BufNewFile *.spin set filetype=spin
" au! Syntax spin source $HOME/.vim/syntax/spin.vim


au BufRead,BufNewFile *.json set filetype=json foldmethod=syntax
"au! Syntax spin source $HOME/.vim/syntax/json.vim
au BufRead,BufNewFile *.tt set filetype=tt2html
au BufRead,BufNewFile *.t set filetype=tt2html
au BufRead,BufNewFile *.jad set filetype=java
au BufRead,BufNewFile *.class silent set filetype=class
au BufRead,BufNewFile *.dtrace setf dtrace
au BufRead,BufNewFile *.dtruss setf dtrace


"set autoindent
let perl_includes_pod = 1
let perl_extended_vars = 1

autocmd FileType perl set makeprg=perl\ -c\ %\ $*
autocmd FileType perl set errorformat=%f:%l:%m
autocmd FileType perl set autowrite

let java_space_errors = 1

vmap <tab> >gv
vmap <s-tab> <gv

set rtp+=/usr/local/opt/fzf

au FileType perl command! -range=% -nargs=* Tidy <line1>,<line2>! \perltidy
au FileType json command! -range=% -nargs=* Tidy call JsonTidy(<line1>,<line2>)
au FileType yaml command! -range=% -nargs=* Tidy call YamlTidy(<line1>,<line2>)
au FileType xml command! -range=% -nargs=* Tidy call XmlTidy(<line1>,<line2>)

"TODO use a proper javascript beautifier for this
" au FileType javascript command! -range=% -nargs=* Tidy <line1>,<line2>! /Users/gordon/src/js-beautify/python/js-beautify -s 2 -

augroup filetypedetect

let mapleader=","
au FileType javascript command Dash call SearchDash('javascript:')
au FileType vim command Dash call SearchDash('vim:')
au FileType perl command Dash call SearchDash('perl:')
au FileType ruby command Dash call SearchDash('ruby:')


map <leader>d :Dash<cr>
function SearchDash(lib)
  let s:url = "dash://".a:lib.expand("<cword>")
  execute "silent ! /usr/bin/open ".s:url
  redraw!
endfunction

function JsonTidy(line1,line2)
  let text = join(getline(a:line1, a:line2),'')
  let text = substitute(text,"'\([^']*\)'",'"\1"','g')
  let text = substitute(text,"\(, \|{\)\([a-zA-Z_]*\):",'\1"\2":','g')
  let text = substitute(text,', }',' }','g')
  let tempfile = substitute(system("mktemp /tmp/vimtidy.XXXX"),'\n','','')
  call writefile([text],tempfile)
  execute a:line1.",".a:line2." ! cat ".tempfile." | ~/.nvm/nvm-exec node ~/.vim/json_tidy.js"
  call system("rm ".tempfile)
endfunction

function YamlTidy(line1,line2)
  let text = join(getline(a:line1, a:line2),'')
  " let text = substitute(text,"'\([^']*\)'",'"\1"','g')
  " let text = substitute(text,"\(, \|{\)\([a-zA-Z_]*\):",'\1"\2":','g')
  " let text = substitute(text,', }',' }','g')
  let tempfile = substitute(system("mktemp /tmp/vimtidy.XXXX"),'\n','','')
  call writefile([text],tempfile)
  execute a:line1.",".a:line2." ! cat ".tempfile." | node ~/.vim/yaml_tidy.js"
  call system("rm ".tempfile)
endfunction

function XmlTidy(line1,line2)
	let text = [join(getline(a:line1, a:line2),'')]
        let tempfile = substitute(system("mktemp /tmp/vimtidy.XXXX"),'\n','','')
        call writefile(text,tempfile)
	execute a:line1.",".a:line2." ! perl -MXML::Tidy -e '$tidy=XML::Tidy->new(shift());$tidy->tidy();print $tidy->toString();' ".tempfile
        call system("rm ".tempfile)
endfunction

map Q :q

"colorscheme torte
"colorscheme morning
set laststatus=2

function! HLNext (blinktime)
        let [bufnum, lnum, col, off] = getpos('.')
        let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
        let target_pat = '\c\%#'.@/
        let ring = matchadd('WhiteOnRed', target_pat, 101)
        redraw
        exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
        call matchdelete(ring)
        redraw
endfunction


filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Bundle 'VundleVim/Vundle.vim'

" My Bundles here:
"
" original repos on github
Bundle 'dracula/vim'
Bundle 'chr4/nginx'
Bundle 'vim-airline/vim-airline'
Bundle 'vim-airline/vim-airline-themes'
Bundle 'dag/vim-fish'
Bundle 'udalov/kotlin-vim'

Bundle 'L9'
Bundle 'FuzzyFinder'

call vundle#end()
filetype plugin indent on

